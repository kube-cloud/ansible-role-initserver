---
# Install Generate Password
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Storage servers hostname are registered in /etc/hosts

  # Shell task
  lineinfile:
    dest: "/etc/hosts"
    regexp: ".*{{ item.host }}.*$"
    line: "{{ item.adress }} {{ item.host }}"
    state: present
  with_items: "{{ storage_servers }}"

  # Change state
  changed_when: false

  # Failed state
  failed_when: false

# Install Generate Password
- name: ({{ ansible_distribution }}) - CONFIGURE - Generate User Password Encrypted

  # Shell task
  shell:
    cmd: echo "{{ server_user_password }}" | openssl passwd -1 -salt kubecloud -stdin

  # Register result
  register: encrypted_password_result

  # Change state
  changed_when: false

  # Failed state
  failed_when: false

# Create custom groups
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure user specific groups are created

  # Group Task
  group:

    # Group name
    name: "{{ item }}"

    # Ensure group is present
    state: present

  # Iterate on groups list
  loop: "{{ server_user_groups }}"

# Create custom users
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Server specific user are created

  # User Task
  user:

    # User name
    name: "{{ server_user_name }}"

    # User password
    password: "{{ encrypted_password_result.stdout }}"

    # User Description
    comment: "{{ server_user_comment }}"

    # User Create home
    create_home: "{{ server_user_create_home }}"

    # Home directory
    home: "{{ server_user_home }}"

    # User group array joined with "," separator
    groups: "{{ server_user_groups | join(',') }}"

    # User Shell
    shell: "{{ server_user_shell }}"

    # Ensure user is present
    state: present

# Ensure required directories are created
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure required directories are created

  # File task
  file:

    # Path
    path: "{{ item }}"

    # State
    state: directory

    # Owner
    owner: "{{ server_user_name }}"

    # Group Owner
    group: "{{ server_user_main_group | default(server_user_name) }}"

    # recurse mode
    recurse: true

  loop: "{{ server_directories }}"

- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure environment variables are defined

  # Line in file Task
  lineinfile:

    # Detsination file
    dest: "/etc/environment"

    # Line to add
    line: "{{ item.env }}={{ item.path }}"

    # State
    state: present

  loop: "{{ server_environments }}"

# Copy ssh private key to the user ssh dir
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Custom keys are added to users

  # Copy key module
  copy:

    # source
    src: "{{ server_user_ssh_private_key }}"

    # destination
    dest: "{{ server_user_home }}/.ssh/id_rsa"

    # Owner
    owner: "{{ server_user_name }}"

    # Group Owner
    group: "{{ server_user_main_group | default(server_user_name) }}"

    # Access
    mode: u+rwx,g-rwx,o-rwx

# Add Authorized keys to the custom created users
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Custom autorized keys are added to users

  # Authorized key module
  authorized_key:

    # User name
    user: "{{ server_user_name }}"

    # Key
    key: "{{ lookup('file', item) }}"

    # Ensure key is present
    state: present

  # Iterate on Users parameter list
  loop: "{{ server_user_autorized_keys }}"

# Generate iptable config file
- name: ({{ ansible_distribution }}) - CONFIGURE - Gen. iptable config initial content ({{ iptables_config_file }})
  blockinfile:
    path: "{{ iptables_config_file }}"
    create: true
    block: |
      *filter
      :INPUT DROP [0:0]
      :FORWARD ACCEPT [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -i lo -j ACCEPT
      -A INPUT -p icmp -j ACCEPT
      COMMIT
    state: present

# Insert TCP Ports in iptable config
- name: ({{ ansible_distribution }}) - CONFIGURE - Insert TCP Ports in iptable config ({{ iptables_config_file }})
  lineinfile:
    path: "{{ iptables_config_file }}"
    regexp: ".*tcp --dport {{ item }}.*"
    insertafter: ":OUTPUT"
    line: "-A INPUT -p tcp --dport {{ item }} -j ACCEPT"
    state: present
  loop: "{{ server_tcp_ports }}"
  creates: "{{ iptables_config_file }}"

# Insert UDP Ports in iptable config
- name: ({{ ansible_distribution }}) - CONFIGURE - Insert UDP Ports in iptable config ({{ iptables_config_file }})
  lineinfile:
    path: "{{ iptables_config_file }}"
    regexp: ".*udp --dport {{ item }}.*"
    insertafter: ":OUTPUT"
    line: "-A INPUT -p udp --dport {{ item }} -j ACCEPT"
    state: present
  loop: "{{ server_udp_ports }}"
  changed_when: false
  failed_when: false

- name: ({{ ansible_distribution }}) - CONFIGURE - Manage firewall rules for CentOS6
  block:

    # Ensure firewalld is not installed
    - name: ({{ ansible_distribution }}) - CONFIGURE - Ensure firewalld is not installed
      package:
        name: firewalld
        state: absent

  when:
    - ansible_os_family == "RedHat"

- name: ({{ ansible_distribution }}) - CONFIGURE - Manage firewall rules for Debian Family
  block:

    # Ensure ufw is not installed
    - name: ({{ ansible_distribution }}) - CONFIGURE - Ensure UFW is not installed
      package:
        name: ufw
        state: absent

    - name: ({{ ansible_distribution }}) - CONFIGURE - Initialize iptables Service bin template
      template:
        src: "iptables-ubuntu-bin.j2"
        dest: "{{ iptables_service_bin_file }}"
        mode: a=rwx
      changed_when: false
      failed_when: false

    - name: ({{ ansible_distribution }}) - CONFIGURE - Initialize iptables Service template
      template:
        src: "iptables-ubuntu-service.j2"
        dest: "{{ iptables_service_file }}"
        mode: u+rw,g+r-w,o+r-w
      changed_when: false
      failed_when: false

  when:
    - ansible_os_family == "Debian"

# Ensure iptable is enabled
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure iptable is enabled
  service:
    name: iptables
    enabled: true
    state: started
