---
# Install Generate Password
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Storage servers hostname are registered in /etc/hosts

  # Shell task
  lineinfile:
    dest: "/etc/hosts"
    regexp: ".*{{ item.host }}.*$"
    line: "{{ item.adress }} {{ item.host }}"
    state: present
  with_items: "{{ storage_servers }}"

  # Register result
  register: encrypted_password_result

  # Change state
  changed_when: false

  # Failed state
  failed_when: false

# Install Generate Password
- name: ({{ ansible_distribution }}) - CONFIGURE - Generate User Password Encrypted

  # Shell task
  shell:
    cmd: echo "{{ server_user_password }}" | openssl passwd -1 -salt kubecloud -stdin

  # Register result
  register: encrypted_password_result

  # Change state
  changed_when: false

  # Failed state
  failed_when: false

# Create custom groups
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure user specific groups are created

  # Group Task
  group:

    # Group name
    name: "{{ item }}"

    # Ensure group is present
    state: present

  # Iterate on groups list
  loop: "{{ server_user_groups }}"

# Create custom users
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Server specific user are created

  # User Task
  user:

    # User name
    name: "{{ server_user_name }}"

    # User password
    password: "{{ encrypted_password_result.stdout }}"

    # User Description
    comment: "{{ server_user_comment }}"

    # User Create home
    create_home: "{{ server_user_create_home }}"

    # Home directory
    home: "{{ server_user_home }}"

    # User group array joined with "," separator
    groups: "{{ server_user_groups | join(',') }}"

    # User Shell
    shell: "{{ server_user_shell }}"

    # Ensure user is present
    state: present

# Ensure required directories are created
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure required directories are created

  # File task
  file:

    # Path
    path: "{{ item }}"

    # State
    state: directory

    # Owner
    owner: "{{ server_user_name }}"

    # Group Owner
    group: "{{ server_user_main_group | default(server_user_name) }}"

    # recurse mode
    recurse: true

  loop: "{{ server_directories }}"

- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure environment variables are defined

  # Line in file Task
  lineinfile:

    # Detsination file
    dest: "/etc/environment"

    # Line to add
    line: "{{ item.env }}={{ item.path }}"

    # State
    state: present

  loop: "{{ server_environments }}"

# Copy ssh private key to the user ssh dir
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Custom keys are added to users

  # Copy key module
  copy:

    # source
    src: "{{ server_user_ssh_private_key }}"

    # destination
    dest: "{{ server_user_home }}/.ssh/id_rsa"

    # Owner
    owner: "{{ server_user_name }}"

    # Group Owner
    group: "{{ server_user_main_group | default(server_user_name) }}"

    # Access
    mode: u+rwx,g-rwx,o-rwx

# Add Authorized keys to the custom created users
- name: ({{ ansible_distribution }}) - CONFIGURE - Ensure Custom autorized keys are added to users

  # Authorized key module
  authorized_key:

    # User name
    user: "{{ server_user_name }}"

    # Key
    key: "{{ lookup('file', item) }}"

    # Ensure key is present
    state: present

  # Iterate on Users parameter list
  loop: "{{ server_user_autorized_keys }}"
